import { defineSchema, defineTable } from "convex/server";
import { v } from "convex/values";

export default defineSchema({
  earners: defineTable({
    earner_id: v.string(),
    earner_type: v.union(v.literal("driver"), v.literal("courier")),
    vehicle_type: v.union(
      v.literal("car"),
      v.literal("bike"),
      v.literal("scooter"),
    ),
    fuel_type: v.union(v.literal("gas"), v.literal("hybrid"), v.literal("EV")),
    is_ev: v.optional(v.boolean()),
    experience_months: v.number(),
    rating: v.number(),
    status: v.union(
      v.literal("offline"),
      v.literal("online"),
      v.literal("engaged"),
    ),
    home_city_id: v.number(),
  }),
  riders: defineTable({
    rider_id: v.string(),
    trip_frequency: v.number(),
    preferred_product: v.union(
      v.literal("UberPool"),
      v.literal("UberX"),
      v.literal("UberGreen"),
      v.literal("UberBlack"),
    ),
    payment_type: v.union(
      v.literal("cash"),
      v.literal("card"),
      v.literal("wallet"),
    ),
  }),
  customers: defineTable({
    customer_id: v.string(),
    order_frequency: v.number(),
    payment_type: v.union(
      v.literal("cash"),
      v.literal("card"),
      v.literal("wallet"),
    ),
  }),
  merchants: defineTable({
    merchant_id: v.string(),
    city_id: v.number(),
    lat: v.number(),
    lon: v.number(),
    hex_id9: v.string(),
  }),
  rides_trips: defineTable({
    ride_id: v.string(),
    driver_id: v.string(),
    rider_id: v.string(),
    city_id: v.string(),
    product: v.union(
      v.literal("UberPool"),
      v.literal("UberX"),
      v.literal("UberGreen"),
      v.literal("UberBlack"),
    ),
    vehicle_type: v.union(
      v.literal("car"),
      v.literal("bike"),
      v.literal("scooter"),
    ),
    is_ev: v.boolean(),
    start_time: v.number(),
    end_time: v.number(),
    pickup_lat: v.number(),
    pickup_lon: v.number(),
    pickup_hex_id9: v.string(),
    drop_lat: v.number(),
    drop_lon: v.number(),
    drop_hex_id9: v.string(),
    distance_km: v.number(),
    duration_mins: v.number(),
    surge_multiplier: v.number(),
    fare_amount: v.number(),
    uber_fee: v.number(),
    net_earnings: v.number(),
    tips: v.number(),
    payment_type: v.union(
      v.literal("cash"),
      v.literal("card"),
      v.literal("wallet"),
    ),
    date: v.string(),
  }),
  eats_orders: defineTable({
    order_id: v.string(),
    courier_id: v.string(),
    customer_id: v.string(),
    merchant_id: v.string(),
    city_id: v.number(),
    vehicle_type: v.union(
      v.literal("car"),
      v.literal("bike"),
      v.literal("scooter"),
    ),
    is_ev: v.boolean(),
    start_time: v.number(),
    end_time: v.number(),
    pickup_lat: v.number(),
    pickup_lon: v.number(),
    pickup_hex_id9: v.string(),
    drop_lat: v.number(),
    drop_lon: v.number(),
    drop_hex_id9: v.string(),
    distance_km: v.number(),
    duration_mins: v.number(),
    basket_value_eur: v.number(),
    delivery_fee_eur: v.number(),
    tip_eur: v.number(),
    net_earnings: v.number(),
    payment_type: v.union(
      v.literal("cash"),
      v.literal("card"),
      v.literal("wallet"),
    ),
    date: v.string(),
  }),
  jobs_like: defineTable({
    job_uuid: v.string(),
    marketplace: v.union(v.literal("ridesharing"), v.literal("eats")),
    datestr: v.string(),
    acceptor_uuid: v.string(),
    requester_uuid: v.string(),
    begin_checkpoint: v.object({
      actual_location_hexagon_id9: v.string(),
      actual_location_latitude: v.number(),
      actual_location_longitude: v.number(),
      city_id: v.number(),
      ata_utc: v.number(),
    }),
    end_checkpoint: v.object({
      actual_location_hexagon_id9: v.string(),
      actual_location_latitude: v.number(),
      actual_location_longitude: v.number(),
      city_id: v.number(),
      ata_utc: v.number(),
    }),
    global_product_name: v.union(
      v.literal("UberPool"),
      v.literal("UberX"),
      v.literal("UberGreen"),
      v.literal("UberBlack"),
      v.literal("Eats"),
    ),
    product_type_name: v.union(
      v.literal("UberPool"),
      v.literal("UberX"),
      v.literal("UberGreen"),
      v.literal("UberBlack"),
      v.literal("Eats"),
    ),
    fulfillment_job_status: v.union(v.literal("completed")),
  }),
  earnings_daily: defineTable({
    earner_id: v.string(),
    city_id: v.number(),
    trips_count: v.number(),
    rides_distance_km: v.number(),
    rides_duration_mins: v.number(),
    rides_gross_fare: v.number(),
    rides_net_earnings: v.number(),
    rides_tips: v.number(),
    orders_count: v.number(),
    eats_distance_km: v.number(),
    eats_duration_mins: v.number(),
    eats_delivery_fee: v.number(),
    eats_net_earnings: v.number(),
    eats_tips: v.number(),
    total_jobs: v.number(),
    total_net_earnings: v.number(),
    total_tips: v.number(),
    week: v.string(),
  }),
  incentives_weekly: defineTable({
    earner_id: v.string(),
    week: v.string(),
    program: v.union(v.literal("rides_quest"), v.literal("eats_quest")),
    target_jobs: v.number(),
    completed_jobs: v.number(),
    achieved: v.boolean(),
    bonus_eur: v.number(),
  }),
  surge_by_hour: defineTable({
    city_id: v.number(),
    hour: v.number(),
    surge_multiplier: v.number(),
  }),
  cancellation_rates: defineTable({
    city_id: v.number(),
    hexagon_id9: v.string(),
    job_count: v.number(),
    cancellation_rate_pct: v.number(),
  }),
  heatmap: defineTable({
    msg: v.object({
      city_id: v.number(),
      map_id: v.string(),
      currency_code: v.string(),
      earnings_heatmap_type: v.union(v.literal("supply_demand")),
      predictions: v.object({
        hexagon_id_9: v.string(),
        predicted_eph: v.number(),
        predicted_std: v.number(),
        in_final_heatmap: v.boolean(),
      }),
    }),
  }),
  weather_daily: defineTable({
    date: v.string(),
    city_id: v.number(),
    weather: v.union(v.literal("clear"), v.literal("rain"), v.literal("snow")),
  }),
});
